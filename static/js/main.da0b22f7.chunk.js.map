{"version":3,"sources":["components/images/pin.png","api/index.js","components/map/map.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","fetchCountriesLocation","a","axios","get","data","modifiedData","filter","lat","long","map","dailyData","confirmed","deaths","recovered","provinceState","uid","Map","state","countries","selectedState","viewport","width","height","latitude","longitude","zoom","this","setState","mapboxApiAccessToken","onViewportChange","mapStyle","d","key","style","backgroundColor","border","outline","onClick","e","preventDefault","src","pinImage","alt","maxHeight","maxWidth","onClose","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,iC,mPCI9BC,EAAsB,uCAAG,gCAAAC,EAAA,+EAEXC,IAAMC,IAAN,UAJf,kCAIe,cAFW,uBAE1BC,EAF0B,EAE1BA,KACFC,EAAeD,EAClBE,QAAO,SAACF,GAAD,OAAsB,MAAZA,EAAKG,KAA4B,MAAbH,EAAKI,QAC1CC,KAAI,SAACC,GAAD,MAAgB,CACnBC,UAAWD,EAAUC,UACrBC,OAAQF,EAAUE,OAClBC,UAAWH,EAAUG,UACrBC,cAAeJ,EAAUI,cACzBP,IAAKG,EAAUH,IACfC,KAAME,EAAUF,KAChBO,IAAKL,EAAUK,QAZe,kBAc3BV,GAd2B,yFAAH,qD,yBCsEpBW,E,4MApEbC,MAAQ,CACNC,UAAW,GACXC,cAAe,KACfC,SAAU,CACRC,MAAO,QACPC,OAAQ,QACRC,SAAU,QACVC,UAAW,QACXC,KAAM,I,kMAIWzB,I,OAAbI,E,OACNsB,KAAKC,SAAS,CAAET,UAAWd,I,qIAGnB,IAAD,OACP,OACE,kBAAC,IAAD,iBACMsB,KAAKT,MAAMG,SADjB,CAEEQ,qBAAqB,mGACrBC,iBAAkB,SAACT,GAAD,OAAc,EAAKO,SAAS,CAAEP,cAChDU,SAAS,2DAERJ,KAAKT,MAAMC,UAAUT,KAAI,SAACsB,GAAD,OACxB,kBAAC,IAAD,CAAQC,IAAKD,EAAEhB,IAAKS,UAAWO,EAAEvB,KAAMe,SAAUQ,EAAExB,KACjD,4BACE0B,MAAO,CACLC,gBAAiB,cACjBC,OAAQ,OACRC,QAAS,QAEXC,QAAS,SAACC,GACRA,EAAEC,iBACF,EAAKZ,SAAS,CAAER,cAAeY,MAGjC,yBACES,IAAKC,IACLC,IAAI,WACJrB,MAAM,KACNC,OAAO,KACPW,MAAO,CAAEU,UAAW,KAAMC,SAAU,aAK3ClB,KAAKT,MAAME,cACV,kBAAC,IAAD,CACEK,UAAWE,KAAKT,MAAME,cAAcX,KACpCe,SAAUG,KAAKT,MAAME,cAAcZ,IACnCsC,QAAS,WACP,EAAKlB,SAAS,CAAER,cAAe,SAGjC,6BACE,4BAAKO,KAAKT,MAAME,cAAcL,eAC9B,yCAAeY,KAAKT,MAAME,cAAcR,WACxC,wCAAce,KAAKT,MAAME,cAAcN,WACvC,sCAAYa,KAAKT,MAAME,cAAcP,UAGvC,U,GA/DMkC,aCSHC,E,uKARX,OACE,6BACE,kBAAC,EAAD,W,GAJUD,aCQEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.da0b22f7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pin.d9dc09a7.png\";","import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api/\";\r\n\r\nexport const fetchCountriesLocation = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}confirmed`);\r\n    const modifiedData = data\r\n      .filter((data) => data.lat != null && data.long != null)\r\n      .map((dailyData) => ({\r\n        confirmed: dailyData.confirmed,\r\n        deaths: dailyData.deaths,\r\n        recovered: dailyData.recovered,\r\n        provinceState: dailyData.provinceState,\r\n        lat: dailyData.lat,\r\n        long: dailyData.long,\r\n        uid: dailyData.uid,\r\n      }));\r\n    return modifiedData;\r\n  } catch (error) {}\r\n};\r\n","import { fetchData, fetchCountriesLocation } from \"../../api\";\r\nimport React, { Component } from \"react\";\r\nimport pinImage from \"../images/pin.png\";\r\nimport ReactMapGL, { Marker, Popup } from \"react-map-gl\";\r\n\r\nclass Map extends Component {\r\n  state = {\r\n    countries: [],\r\n    selectedState: null,\r\n    viewport: {\r\n      width: \"100vw\",\r\n      height: \"100vh\",\r\n      latitude: 30.3753,\r\n      longitude: 69.3451,\r\n      zoom: 5,\r\n    },\r\n  };\r\n  async componentDidMount() {\r\n    const data = await fetchCountriesLocation();\r\n    this.setState({ countries: data });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ReactMapGL\r\n        {...this.state.viewport}\r\n        mapboxApiAccessToken=\"pk.eyJ1IjoiY2FsbGFsaXNoeWtoIiwiYSI6ImNrY2FoOGF3ajF2MGUycWxxcm5zNjluMnMifQ.5FlC5_OioAyqDqY4gMR7Pg\"\r\n        onViewportChange={(viewport) => this.setState({ viewport })}\r\n        mapStyle=\"mapbox://styles/callalishykh/ckcar32w12j4b1inyoxuhvdc6\"\r\n      >\r\n        {this.state.countries.map((d) => (\r\n          <Marker key={d.uid} longitude={d.long} latitude={d.lat}>\r\n            <button\r\n              style={{\r\n                backgroundColor: \"Transparent\",\r\n                border: \"none\",\r\n                outline: \"none\",\r\n              }}\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                this.setState({ selectedState: d });\r\n              }}\r\n            >\r\n              <img\r\n                src={pinImage}\r\n                alt=\"covid-19\"\r\n                width=\"15\"\r\n                height=\"20\"\r\n                style={{ maxHeight: \"15\", maxWidth: \"10\" }}\r\n              ></img>\r\n            </button>\r\n          </Marker>\r\n        ))}\r\n        {this.state.selectedState ? (\r\n          <Popup\r\n            longitude={this.state.selectedState.long}\r\n            latitude={this.state.selectedState.lat}\r\n            onClose={() => {\r\n              this.setState({ selectedState: null });\r\n            }}\r\n          >\r\n            <div>\r\n              <h4>{this.state.selectedState.provinceState}</h4>\r\n              <p>Confirmed: {this.state.selectedState.confirmed}</p>\r\n              <p>Recoverd: {this.state.selectedState.recovered}</p>\r\n              <p>Deaths: {this.state.selectedState.deaths}</p>\r\n            </div>\r\n          </Popup>\r\n        ) : null}\r\n      </ReactMapGL>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Map;\r\n","import React, { Component } from \"react\";\r\nimport \"./map.css\";\r\nimport Map from \"./components/map/map\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Map></Map>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}